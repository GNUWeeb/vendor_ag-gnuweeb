From cd523c2c7ba2a3b4b72f7c2c1409c94f4bf1472e Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Wed, 4 Mar 2020 18:09:47 +0200
Subject: [PATCH 06/12] Revert "Update the behavior of the Dark theme slice"

This reverts commit 5f42f2f7a7

	modified:   src/com/android/settings/homepage/contextualcards/slices/DarkThemeSlice.java
	modified:   tests/robotests/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSliceTest.java

Change-Id: I72649c924c54b3ef998f7fb8cd8ced633e742973
---
 .../slices/DarkThemeSlice.java                | 74 ++-----------------
 .../slices/DarkThemeSliceTest.java            | 40 ++++------
 2 files changed, 21 insertions(+), 93 deletions(-)

diff --git a/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSlice.java b/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSlice.java
index 1b7f003ac8..36a3980294 100644
--- a/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSlice.java
+++ b/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSlice.java
@@ -17,21 +17,15 @@ package com.android.settings.homepage.contextualcards.slices;
 
 import static androidx.slice.builders.ListBuilder.ICON_IMAGE;
 
-import static android.provider.Settings.Global.LOW_POWER_MODE;
-
 import android.annotation.ColorInt;
 import android.app.PendingIntent;
 import android.app.UiModeManager;
 import android.content.Context;
 import android.content.Intent;
-import android.content.res.Configuration;
-import android.database.ContentObserver;
 import android.net.Uri;
 import android.os.BatteryManager;
 import android.os.Handler;
 import android.os.Looper;
-import android.os.PowerManager;
-import android.provider.Settings;
 import android.util.Log;
 
 import androidx.annotation.VisibleForTesting;
@@ -45,9 +39,6 @@ import com.android.settings.Utils;
 import com.android.settings.overlay.FeatureFactory;
 import com.android.settings.slices.CustomSliceRegistry;
 import com.android.settings.slices.CustomSliceable;
-import com.android.settings.slices.SliceBackgroundWorker;
-
-import java.io.IOException;
 
 public class DarkThemeSlice implements CustomSliceable {
     private static final String TAG = "DarkThemeSlice";
@@ -62,12 +53,10 @@ public class DarkThemeSlice implements CustomSliceable {
 
     private final Context mContext;
     private final UiModeManager mUiModeManager;
-    private final PowerManager mPowerManager;
 
     public DarkThemeSlice(Context context) {
         mContext = context;
         mUiModeManager = context.getSystemService(UiModeManager.class);
-        mPowerManager = context.getSystemService(PowerManager.class);
     }
 
     @Override
@@ -78,18 +67,15 @@ public class DarkThemeSlice implements CustomSliceable {
             sActiveUiSession = currentUiSession;
             sKeepSliceShow = false;
         }
-        // Dark theme slice will disappear when battery saver is ON.
-        if (mPowerManager.isPowerSaveMode() || (!sKeepSliceShow && !isAvailable(mContext))) {
-            return new ListBuilder(mContext, CustomSliceRegistry.DARK_THEME_SLICE_URI,
-                    ListBuilder.INFINITY)
-                    .setIsError(true)
-                    .build();
+        if (!sKeepSliceShow && !isAvailable(mContext)) {
+            return null;
         }
         sKeepSliceShow = true;
         final PendingIntent toggleAction = getBroadcastIntent(mContext);
         @ColorInt final int color = Utils.getColorAccentDefaultColor(mContext);
         final IconCompat icon =
                 IconCompat.createWithResource(mContext, R.drawable.dark_theme);
+        final boolean isChecked = mUiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_YES;
         return new ListBuilder(mContext, CustomSliceRegistry.DARK_THEME_SLICE_URI,
                 ListBuilder.INFINITY)
                 .setAccentColor(color)
@@ -99,7 +85,7 @@ public class DarkThemeSlice implements CustomSliceable {
                         .setSubtitle(mContext.getText(R.string.dark_theme_slice_subtitle))
                         .setPrimaryAction(
                                 SliceAction.createToggle(toggleAction, null /* actionTitle */,
-                                        isDarkThemeMode(mContext))))
+                                        isChecked)))
                 .build();
     }
 
@@ -114,7 +100,8 @@ public class DarkThemeSlice implements CustomSliceable {
                 false);
         // make toggle transition more smooth before dark theme takes effect
         new Handler(Looper.getMainLooper()).postDelayed(() -> {
-            mUiModeManager.setNightModeActivated(isChecked);
+            mUiModeManager.setNightMode(
+                isChecked ? UiModeManager.MODE_NIGHT_YES : UiModeManager.MODE_NIGHT_NO);
         }, DELAY_TIME_EXECUTING_DARK_THEME);
     }
 
@@ -123,15 +110,10 @@ public class DarkThemeSlice implements CustomSliceable {
         return null;
     }
 
-    @Override
-    public Class getBackgroundWorkerClass() {
-        return DarkThemeWorker.class;
-    }
-
     @VisibleForTesting
     boolean isAvailable(Context context) {
         // checking dark theme mode.
-        if (isDarkThemeMode(context)) {
+        if (mUiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_YES) {
             return false;
         }
 
@@ -139,47 +121,7 @@ public class DarkThemeSlice implements CustomSliceable {
         final BatteryManager batteryManager = context.getSystemService(BatteryManager.class);
         final int level = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);
         Log.d(TAG, "battery level=" + level);
-        return level <= BATTERY_LEVEL_THRESHOLD;
-    }
-
-    @VisibleForTesting
-    boolean isDarkThemeMode(Context context) {
-        final int currentNightMode =
-                context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
-        return currentNightMode == Configuration.UI_MODE_NIGHT_YES;
-    }
 
-    public static class DarkThemeWorker extends SliceBackgroundWorker<Void> {
-        private final Context mContext;
-        private final ContentObserver mContentObserver =
-                new ContentObserver(new Handler(Looper.getMainLooper())) {
-                    @Override
-                    public void onChange(boolean bChanged) {
-                        if (mContext.getSystemService(PowerManager.class).isPowerSaveMode()) {
-                            notifySliceChange();
-                        }
-                    }
-                };
-
-        public DarkThemeWorker(Context context, Uri uri) {
-            super(context, uri);
-            mContext = context;
-        }
-
-        @Override
-        protected void onSlicePinned() {
-            mContext.getContentResolver().registerContentObserver(
-                    Settings.Global.getUriFor(LOW_POWER_MODE), false /* notifyForDescendants */,
-                    mContentObserver);
-        }
-
-        @Override
-        protected void onSliceUnpinned() {
-            mContext.getContentResolver().unregisterContentObserver(mContentObserver);
-        }
-
-        @Override
-        public void close() throws IOException {
-        }
+        return level <= BATTERY_LEVEL_THRESHOLD;
     }
 }
diff --git a/tests/robotests/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSliceTest.java b/tests/robotests/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSliceTest.java
index 1af7b2bfac..bb213329b7 100644
--- a/tests/robotests/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSliceTest.java
+++ b/tests/robotests/src/com/android/settings/homepage/contextualcards/slices/DarkThemeSliceTest.java
@@ -22,10 +22,10 @@ import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
 
+import android.app.UiModeManager;
 import android.content.Context;
 import android.net.Uri;
 import android.os.BatteryManager;
-import android.os.PowerManager;
 
 import androidx.slice.Slice;
 import androidx.slice.SliceMetadata;
@@ -48,9 +48,9 @@ import org.robolectric.RuntimeEnvironment;
 @RunWith(RobolectricTestRunner.class)
 public class DarkThemeSliceTest {
     @Mock
-    private BatteryManager mBatteryManager;
+    private UiModeManager mUiModeManager;
     @Mock
-    private PowerManager mPowerManager;
+    private BatteryManager mBatteryManager;
 
     private Context mContext;
     private DarkThemeSlice mDarkThemeSlice;
@@ -63,12 +63,11 @@ public class DarkThemeSliceTest {
         mFeatureFactory = FakeFeatureFactory.setupForTest();
         mFeatureFactory.slicesFeatureProvider = new SlicesFeatureProviderImpl();
         mFeatureFactory.slicesFeatureProvider.newUiSession();
-        doReturn(mPowerManager).when(mContext).getSystemService(PowerManager.class);
-        when(mPowerManager.isPowerSaveMode()).thenReturn(false);
+        doReturn(mUiModeManager).when(mContext).getSystemService(UiModeManager.class);
 
         // Set-up specs for SliceMetadata.
         SliceProvider.setSpecs(SliceLiveData.SUPPORTED_SPECS);
-        mDarkThemeSlice = spy(new DarkThemeSlice(mContext));
+        mDarkThemeSlice = new DarkThemeSlice(mContext);
         mDarkThemeSlice.sKeepSliceShow = false;
     }
 
@@ -81,7 +80,7 @@ public class DarkThemeSliceTest {
 
     @Test
     public void isAvailable_inDarkThemeMode_returnFalse() {
-        doReturn(true).when(mDarkThemeSlice).isDarkThemeMode(mContext);
+        when(mUiModeManager.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
 
         assertThat(mDarkThemeSlice.isAvailable(mContext)).isFalse();
     }
@@ -101,36 +100,23 @@ public class DarkThemeSliceTest {
     }
 
     @Test
-    public void getSlice_batterySaver_returnErrorSlice() {
-        when(mPowerManager.isPowerSaveMode()).thenReturn(true);
-
-        final Slice mediaSlice = mDarkThemeSlice.getSlice();
-        final SliceMetadata metadata = SliceMetadata.from(mContext, mediaSlice);
-        assertThat(metadata.isErrorSlice()).isTrue();
-    }
-
-    @Test
-    public void getSlice_notAvailable_returnErrorSlice() {
-        doReturn(true).when(mDarkThemeSlice).isDarkThemeMode(mContext);
+    public void getSlice_notAvailable_returnNull() {
+        when(mUiModeManager.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
 
-        final Slice mediaSlice = mDarkThemeSlice.getSlice();
-        final SliceMetadata metadata = SliceMetadata.from(mContext, mediaSlice);
-        assertThat(metadata.isErrorSlice()).isTrue();
+        assertThat(mDarkThemeSlice.getSlice()).isNull();
     }
 
     @Test
-    public void getSlice_newSession_notAvailable_returnErrorSlice() {
+    public void getSlice_newSession_notAvailable_returnNull() {
         // previous displayed: yes
         mDarkThemeSlice.sKeepSliceShow = true;
         // Session: use original value + 1 to become a new session
         mDarkThemeSlice.sActiveUiSession =
                 mFeatureFactory.slicesFeatureProvider.getUiSessionToken() + 1;
 
-        doReturn(true).when(mDarkThemeSlice).isDarkThemeMode(mContext);
+        when(mUiModeManager.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
 
-        final Slice mediaSlice = mDarkThemeSlice.getSlice();
-        final SliceMetadata metadata = SliceMetadata.from(mContext, mediaSlice);
-        assertThat(metadata.isErrorSlice()).isTrue();
+        assertThat(mDarkThemeSlice.getSlice()).isNull();
     }
 
     @Test
@@ -163,7 +149,7 @@ public class DarkThemeSliceTest {
     }
 
     private void setBatteryCapacityLevel(int power_level) {
-        doReturn(false).when(mDarkThemeSlice).isDarkThemeMode(mContext);
+        when(mUiModeManager.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_NO);
         doReturn(mBatteryManager).when(mContext).getSystemService(BatteryManager.class);
         when(mBatteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY))
                 .thenReturn(power_level);
-- 
2.25.1

