From 4cb62e952cc90f76fd3ebf6862c1d25945b8b40e Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Thu, 5 Mar 2020 04:10:22 +0200
Subject: [PATCH 07/12] Revert "Battery saver mode should disable dark mode
 modification"

	modified:   src/com/android/settings/display/DarkUIPreferenceController.java
	modified:   src/com/android/settings/display/darkmode/DarkModeActivationPreferenceController.java
	modified:   src/com/android/settings/display/darkmode/DarkModeObserver.java
	modified:   src/com/android/settings/display/darkmode/DarkModePreference.java
	modified:   src/com/android/settings/display/darkmode/DarkModeScheduleSelectorController.java
	modified:   tests/robotests/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceControllerTest.java
	modified:   tests/robotests/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorControllerTest.java

Change-Id: Ie9391362c5b7e515307fc4c10ec7ea20839abd92
---
 .../display/DarkUIPreferenceController.java   |  2 ++
 ...arkModeActivationPreferenceController.java | 12 +--------
 .../display/darkmode/DarkModeObserver.java    | 23 -----------------
 .../display/darkmode/DarkModePreference.java  | 19 +++-----------
 .../DarkModeScheduleSelectorController.java   |  6 +----
 ...odeActivationPreferenceControllerTest.java | 12 ---------
 ...arkModeScheduleSelectorControllerTest.java | 25 +++++--------------
 7 files changed, 14 insertions(+), 85 deletions(-)

diff --git a/src/com/android/settings/display/DarkUIPreferenceController.java b/src/com/android/settings/display/DarkUIPreferenceController.java
index e93f7a49bd..4816b21dca 100644
--- a/src/com/android/settings/display/DarkUIPreferenceController.java
+++ b/src/com/android/settings/display/DarkUIPreferenceController.java
@@ -32,6 +32,7 @@ import androidx.preference.PreferenceScreen;
 
 import com.android.settings.R;
 import com.android.settings.core.TogglePreferenceController;
+import com.android.settings.display.darkmode.DarkModePreference;
 import com.android.settingslib.core.lifecycle.LifecycleObserver;
 import com.android.settingslib.core.lifecycle.events.OnStart;
 import com.android.settingslib.core.lifecycle.events.OnStop;
@@ -91,6 +92,7 @@ public class DarkUIPreferenceController extends TogglePreferenceController imple
                         Settings.Secure.DARK_MODE_DIALOG_SEEN, 0) == DIALOG_SEEN;
         if (!dialogSeen && isChecked) {
             showDarkModeDialog();
+            return false;
         }
         return mUiModeManager.setNightModeActivated(isChecked);
     }
diff --git a/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceController.java b/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceController.java
index 23f625f289..98d4b14cd9 100644
--- a/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceController.java
+++ b/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceController.java
@@ -17,7 +17,6 @@ package com.android.settings.display.darkmode;
 import android.app.UiModeManager;
 import android.content.Context;
 import android.content.res.Configuration;
-import android.os.PowerManager;
 import android.view.View;
 import android.widget.Button;
 import androidx.preference.Preference;
@@ -31,27 +30,18 @@ import com.android.settingslib.widget.LayoutPreference;
  */
 public class DarkModeActivationPreferenceController extends BasePreferenceController {
     private final UiModeManager mUiModeManager;
-    private PowerManager mPowerManager;
     private Button mTurnOffButton;
     private Button mTurnOnButton;
 
     public DarkModeActivationPreferenceController(Context context,
             String preferenceKey) {
         super(context, preferenceKey);
-        mPowerManager = context.getSystemService(PowerManager.class);
+
         mUiModeManager = context.getSystemService(UiModeManager.class);
     }
 
     @Override
     public final void updateState(Preference preference) {
-
-        final boolean batterySaver = mPowerManager.isPowerSaveMode();
-        if (batterySaver) {
-            mTurnOnButton.setVisibility(View.GONE);
-            mTurnOffButton.setVisibility(View.GONE);
-            return;
-        }
-
         final boolean active = (mContext.getResources().getConfiguration().uiMode
                 & Configuration.UI_MODE_NIGHT_YES) != 0;
         updateNightMode(active);
diff --git a/src/com/android/settings/display/darkmode/DarkModeObserver.java b/src/com/android/settings/display/darkmode/DarkModeObserver.java
index 4d0d7c58f1..1c076f7dc9 100644
--- a/src/com/android/settings/display/darkmode/DarkModeObserver.java
+++ b/src/com/android/settings/display/darkmode/DarkModeObserver.java
@@ -14,30 +14,18 @@
 
 package com.android.settings.display.darkmode;
 
-import android.content.BroadcastReceiver;
 import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
 import android.database.ContentObserver;
 import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
-import android.os.PowerManager;
 import android.provider.Settings;
-import android.util.Log;
 import com.android.internal.annotations.VisibleForTesting;
 
 /**
  * Observes changes for dark night settings*/
 public class DarkModeObserver {
-    private static final String TAG = "DarkModeObserver";
     private ContentObserver mContentObserver;
-    private final BroadcastReceiver mBatterySaverReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            mCallback.run();
-        }
-    };
     private Runnable mCallback;
     private Context mContext;
 
@@ -70,10 +58,6 @@ public class DarkModeObserver {
         mCallback = callback;
         final Uri uri = Settings.Secure.getUriFor(Settings.Secure.UI_NIGHT_MODE);
         mContext.getContentResolver().registerContentObserver(uri, false, mContentObserver);
-        final IntentFilter batteryFilter = new IntentFilter();
-        batteryFilter.addAction(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);
-        mContext.registerReceiver(
-                mBatterySaverReceiver, batteryFilter);
     }
 
     /**
@@ -81,13 +65,6 @@ public class DarkModeObserver {
      */
     public void unsubscribe() {
         mContext.getContentResolver().unregisterContentObserver(mContentObserver);
-        try {
-            mContext.unregisterReceiver(mBatterySaverReceiver);
-        } catch (IllegalArgumentException e) {
-            /* Ignore: unregistering an unregistered receiver */
-            Log.w(TAG, e.getMessage());
-        }
-        // NO-OP
         mCallback = null;
     }
 
diff --git a/src/com/android/settings/display/darkmode/DarkModePreference.java b/src/com/android/settings/display/darkmode/DarkModePreference.java
index c5fbdedf57..2a8909f9c2 100644
--- a/src/com/android/settings/display/darkmode/DarkModePreference.java
+++ b/src/com/android/settings/display/darkmode/DarkModePreference.java
@@ -17,7 +17,6 @@ package com.android.settings.display.darkmode;
 import android.app.UiModeManager;
 import android.content.Context;
 import android.content.res.Configuration;
-import android.os.PowerManager;
 import android.util.AttributeSet;
 import com.android.settings.R;
 import com.android.settings.widget.MasterSwitchPreference;
@@ -28,20 +27,14 @@ public class DarkModePreference extends MasterSwitchPreference {
 
     private UiModeManager mUiModeManager;
     private DarkModeObserver mDarkModeObserver;
-    private PowerManager mPowerManager;
     private Runnable mCallback;
 
     public DarkModePreference(Context context, AttributeSet attrs) {
         super(context, attrs);
         mDarkModeObserver = new DarkModeObserver(context);
         mUiModeManager = context.getSystemService(UiModeManager.class);
-        mPowerManager = context.getSystemService(PowerManager.class);
         mCallback = () -> {
-            final boolean batterySaver = mPowerManager.isPowerSaveMode();
-            final boolean active = (getContext().getResources().getConfiguration().uiMode
-                    & Configuration.UI_MODE_NIGHT_YES) != 0;
-            setSwitchEnabled(!batterySaver);
-            updateSummary(batterySaver, active);
+            updateSummary();
         };
         mDarkModeObserver.subscribe(mCallback);
     }
@@ -58,13 +51,9 @@ public class DarkModePreference extends MasterSwitchPreference {
         mDarkModeObserver.unsubscribe();
     }
 
-    private void updateSummary(boolean batterySaver, boolean active) {
-        if (batterySaver) {
-            final int stringId = active ? R.string.dark_ui_mode_disabled_summary_dark_theme_on
-                    : R.string.dark_ui_mode_disabled_summary_dark_theme_off;
-            setSummary(getContext().getString(stringId));
-            return;
-        }
+    private void updateSummary() {
+        final boolean active = (getContext().getResources().getConfiguration().uiMode
+                & Configuration.UI_MODE_NIGHT_YES) != 0;
         final boolean auto = mUiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO;
 
         String detail;
diff --git a/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorController.java b/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorController.java
index 360f311a9d..7b311760cb 100644
--- a/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorController.java
+++ b/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorController.java
@@ -17,7 +17,6 @@ package com.android.settings.display.darkmode;
 import android.app.UiModeManager;
 import android.content.Context;
 import android.content.res.Configuration;
-import android.os.PowerManager;
 import androidx.preference.ListPreference;
 import androidx.preference.Preference;
 import androidx.preference.PreferenceScreen;
@@ -31,14 +30,13 @@ public class DarkModeScheduleSelectorController extends BasePreferenceController
         implements Preference.OnPreferenceChangeListener {
 
     private final UiModeManager mUiModeManager;
-    private PowerManager mPowerManager;
+    private boolean mPreferenceSet = false;
     private ListPreference mPreference;
     private String mCurrentMode;
 
     public DarkModeScheduleSelectorController(Context context, String key) {
         super(context, key);
         mUiModeManager = context.getSystemService(UiModeManager.class);
-        mPowerManager = context.getSystemService(PowerManager.class);
     }
 
     @Override
@@ -55,8 +53,6 @@ public class DarkModeScheduleSelectorController extends BasePreferenceController
 
     @Override
     public final void updateState(Preference preference) {
-        final boolean batterySaver = mPowerManager.isPowerSaveMode();
-        mPreference.setEnabled(!batterySaver);
         mCurrentMode =
                 mUiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO
                 ? mContext.getString(R.string.dark_ui_auto_mode_auto)
diff --git a/tests/robotests/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceControllerTest.java b/tests/robotests/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceControllerTest.java
index cd20ea230a..24cbd0707c 100644
--- a/tests/robotests/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceControllerTest.java
+++ b/tests/robotests/src/com/android/settings/display/darkmode/DarkModeActivationPreferenceControllerTest.java
@@ -19,7 +19,6 @@ import android.app.UiModeManager;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
-import android.os.PowerManager;
 import android.view.View;
 import android.widget.Button;
 import androidx.preference.PreferenceScreen;
@@ -58,8 +57,6 @@ public class DarkModeActivationPreferenceControllerTest {
     private Button mTurnOffButton;
     @Mock
     private Button mTurnOnButton;
-    @Mock
-    private PowerManager mPM;
 
     private Configuration configNightYes = new Configuration();
     private Configuration configNightNo = new Configuration();;
@@ -70,7 +67,6 @@ public class DarkModeActivationPreferenceControllerTest {
         mService = mock(UiModeManager.class);
         when(mContext.getResources()).thenReturn(res);
         when(mContext.getSystemService(UiModeManager.class)).thenReturn(mService);
-        when(mContext.getSystemService(PowerManager.class)).thenReturn(mPM);
         when(mScreen.findPreference(anyString())).thenReturn(mPreference);
         when(mPreference.findViewById(
                 eq(R.id.dark_ui_turn_on_button))).thenReturn(mTurnOnButton);
@@ -156,12 +152,4 @@ public class DarkModeActivationPreferenceControllerTest {
         assertEquals(mController.getSummary(), mContext.getString(
                 R.string.dark_ui_summary_off_auto_mode_auto));
     }
-
-    @Test
-    public void buttonVisisbility_hideButton_offWhenInPowerSaveMode() {
-        when(mPM.isPowerSaveMode()).thenReturn(true);
-        mController.updateState(mPreference);
-        verify(mTurnOffButton).setVisibility(eq(View.GONE));
-        verify(mTurnOnButton).setVisibility(eq(View.GONE));
-    }
 }
diff --git a/tests/robotests/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorControllerTest.java b/tests/robotests/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorControllerTest.java
index 53be42cadd..a844fec095 100644
--- a/tests/robotests/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorControllerTest.java
+++ b/tests/robotests/src/com/android/settings/display/darkmode/DarkModeScheduleSelectorControllerTest.java
@@ -16,7 +16,6 @@ package com.android.settings.display.darkmode;
 
 import android.app.UiModeManager;
 import android.content.Context;
-import android.os.PowerManager;
 import androidx.preference.DropDownPreference;
 import androidx.preference.PreferenceScreen;
 import org.junit.Before;
@@ -32,7 +31,6 @@ import static junit.framework.TestCase.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -47,27 +45,24 @@ public class DarkModeScheduleSelectorControllerTest {
     private PreferenceScreen mScreen;
     private Context mContext;
     @Mock
-    private UiModeManager mUiService;
-    @Mock
-    private PowerManager mPM;
+    private UiModeManager mService;
 
     @Before
     public void setUp() {
         MockitoAnnotations.initMocks(this);
         mContext = spy(RuntimeEnvironment.application);
-        when(mContext.getSystemService(UiModeManager.class)).thenReturn(mUiService);
-        when(mContext.getSystemService(PowerManager.class)).thenReturn(mPM);
+        when(mContext.getSystemService(UiModeManager.class)).thenReturn(mService);
         when(mContext.getString(R.string.dark_ui_auto_mode_never)).thenReturn("never");
         when(mContext.getString(R.string.dark_ui_auto_mode_auto)).thenReturn("auto");
         mPreference = spy(new DropDownPreference(mContext));
         when(mScreen.findPreference(anyString())).thenReturn(mPreference);
-        when(mUiService.setNightModeActivated(anyBoolean())).thenReturn(true);
+        when(mService.setNightModeActivated(anyBoolean())).thenReturn(true);
         mController = new DarkModeScheduleSelectorController(mContext, mPreferenceKey);
     }
 
     @Test
     public void nightMode_preferenceChange_preferenceChangeTrueWhenChangedOnly() {
-        when(mUiService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
+        when(mService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
         mController.displayPreference(mScreen);
         boolean changed = mController
                 .onPreferenceChange(mScreen, mContext.getString(R.string.dark_ui_auto_mode_auto));
@@ -79,7 +74,7 @@ public class DarkModeScheduleSelectorControllerTest {
 
     @Test
     public void nightMode_updateStateNone_dropDownValueChangedToNone() {
-        when(mUiService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
+        when(mService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_YES);
         mController.displayPreference(mScreen);
         mController.updateState(mPreference);
         verify(mPreference).setValue(mContext.getString(R.string.dark_ui_auto_mode_never));
@@ -87,17 +82,9 @@ public class DarkModeScheduleSelectorControllerTest {
 
     @Test
     public void nightMode_updateStateNone_dropDownValueChangedToAuto() {
-        when(mUiService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_AUTO);
+        when(mService.getNightMode()).thenReturn(UiModeManager.MODE_NIGHT_AUTO);
         mController.displayPreference(mScreen);
         mController.updateState(mPreference);
         verify(mPreference).setValue(mContext.getString(R.string.dark_ui_auto_mode_auto));
     }
-
-    @Test
-    public void batterySaver_dropDown_disabledSelector() {
-        when(mPM.isPowerSaveMode()).thenReturn(true);
-        mController.displayPreference(mScreen);
-        mController.updateState(mPreference);
-        verify(mPreference).setEnabled(eq(false));
-    }
 }
-- 
2.25.1

