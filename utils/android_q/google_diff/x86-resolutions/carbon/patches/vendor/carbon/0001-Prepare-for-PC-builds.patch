From 648332ae6ccc2ed9c499a28584249f8d61b86ade Mon Sep 17 00:00:00 2001
From: Jon West <electrikjesus@gmail.com>
Date: Thu, 13 Aug 2020 15:16:57 -0400
Subject: [PATCH] Prepare for PC builds

Change-Id: I84371b8024f680f6385baed17608cab96ab99332
---
 build/core/config.mk        |   2 +-
 build/tasks/kernel.mk       | 326 ------------------------------------
 config/BoardConfigCarbon.mk |   2 +-
 config/common.mk            |   4 +-
 sdclang/sdllvm-lto-defs.mk  |  35 ----
 sdclang/vendorsetup.sh      |  20 ---
 6 files changed, 4 insertions(+), 385 deletions(-)
 delete mode 100644 build/tasks/kernel.mk
 delete mode 100644 sdclang/sdllvm-lto-defs.mk
 delete mode 100644 sdclang/vendorsetup.sh

diff --git a/build/core/config.mk b/build/core/config.mk
index 29c241c..0861f08 100644
--- a/build/core/config.mk
+++ b/build/core/config.mk
@@ -18,7 +18,7 @@
 include vendor/carbon/build/core/utils.mk
 
 # Include vendor platform definitions
-include vendor/carbon/build/core/vendor/*.mk
+#~ include vendor/carbon/build/core/vendor/*.mk
 
 # Rules for QCOM targets
 include $(TOPDIR)vendor/carbon/build/core/qcom_target.mk
diff --git a/build/tasks/kernel.mk b/build/tasks/kernel.mk
deleted file mode 100644
index f002fa0..0000000
--- a/build/tasks/kernel.mk
+++ /dev/null
@@ -1,326 +0,0 @@
-# Copyright (C) 2012 The CyanogenMod Project
-#           (C) 2017 The LineageOS Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-
-# Android makefile to build kernel as a part of Android Build
-#
-# Configuration
-# =============
-#
-# These config vars are usually set in BoardConfig.mk:
-#
-#   TARGET_KERNEL_CONFIG               = Kernel defconfig
-#   TARGET_KERNEL_VARIANT_CONFIG       = Variant defconfig, optional
-#   TARGET_KERNEL_SELINUX_CONFIG       = SELinux defconfig, optional
-#   TARGET_KERNEL_ADDITIONAL_CONFIG    = Additional defconfig, optional
-#
-#   TARGET_KERNEL_CLANG_COMPILE        = Compile kernel with clang, defaults to false
-#
-#   TARGET_KERNEL_CLANG_VERSION        = Clang prebuilts version, optional, defaults to clang-stable
-#
-#   TARGET_KERNEL_CLANG_PATH           = Clang prebuilts path, optional
-#
-#   BOARD_KERNEL_IMAGE_NAME            = Built image name
-#                                          for ARM use: zImage
-#                                          for ARM64 use: Image.gz
-#                                          for uncompressed use: Image
-#                                          If using an appended DT, append '-dtb'
-#                                          to the end of the image name.
-#                                          For example, for ARM devices,
-#                                          use zImage-dtb instead of zImage.
-#
-#   KERNEL_CC                          = The C Compiler used. This is automatically set based
-#                                          on whether the clang version is set, optional.
-#
-#   KERNEL_CLANG_TRIPLE                = Target triple for clang (e.g. aarch64-linux-gnu-)
-#                                          defaults to arm-linux-gnu- for arm
-#                                                      aarch64-linux-gnu- for arm64
-#                                                      x86_64-linux-gnu- for x86
-#
-#   NEED_KERNEL_MODULE_ROOT            = Optional, if true, install kernel
-#                                          modules in root instead of vendor
-#   NEED_KERNEL_MODULE_SYSTEM          = Optional, if true, install kernel
-#                                          modules in system instead of vendor
-
-ifneq ($(TARGET_NO_KERNEL),true)
-
-## Externally influenced variables
-KERNEL_SRC := $(TARGET_KERNEL_SOURCE)
-# kernel configuration - mandatory
-KERNEL_DEFCONFIG := $(TARGET_KERNEL_CONFIG)
-VARIANT_DEFCONFIG := $(TARGET_KERNEL_VARIANT_CONFIG)
-SELINUX_DEFCONFIG := $(TARGET_KERNEL_SELINUX_CONFIG)
-
-## Internal variables
-DTBS_OUT := $(PRODUCT_OUT)/dtbs
-KERNEL_OUT := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
-KERNEL_CONFIG := $(KERNEL_OUT)/.config
-KERNEL_RELEASE := $(KERNEL_OUT)/include/config/kernel.release
-
-ifeq ($(KERNEL_ARCH),x86_64)
-KERNEL_DEFCONFIG_ARCH := x86
-else
-KERNEL_DEFCONFIG_ARCH := $(KERNEL_ARCH)
-endif
-KERNEL_DEFCONFIG_DIR := $(KERNEL_SRC)/arch/$(KERNEL_DEFCONFIG_ARCH)/configs
-KERNEL_DEFCONFIG_SRC := $(KERNEL_DEFCONFIG_DIR)/$(KERNEL_DEFCONFIG)
-
-ifneq ($(TARGET_KERNEL_ADDITIONAL_CONFIG),)
-KERNEL_ADDITIONAL_CONFIG := $(TARGET_KERNEL_ADDITIONAL_CONFIG)
-KERNEL_ADDITIONAL_CONFIG_SRC := $(KERNEL_DEFCONFIG_DIR)/$(KERNEL_ADDITIONAL_CONFIG)
-    ifeq ("$(wildcard $(KERNEL_ADDITIONAL_CONFIG_SRC))","")
-        $(warning TARGET_KERNEL_ADDITIONAL_CONFIG '$(TARGET_KERNEL_ADDITIONAL_CONFIG)' doesn't exist)
-        KERNEL_ADDITIONAL_CONFIG_SRC := /dev/null
-    endif
-else
-    KERNEL_ADDITIONAL_CONFIG_SRC := /dev/null
-endif
-
-ifeq ($(BOARD_KERNEL_IMAGE_NAME),)
-$(error BOARD_KERNEL_IMAGE_NAME not defined.)
-endif
-TARGET_PREBUILT_INT_KERNEL := $(KERNEL_OUT)/arch/$(KERNEL_ARCH)/boot/$(BOARD_KERNEL_IMAGE_NAME)
-
-ifeq "$(wildcard $(KERNEL_SRC) )" ""
-    ifneq ($(TARGET_PREBUILT_KERNEL),)
-        HAS_PREBUILT_KERNEL := true
-        NEEDS_KERNEL_COPY := true
-    else
-        $(foreach cf,$(PRODUCT_COPY_FILES), \
-            $(eval _src := $(call word-colon,1,$(cf))) \
-            $(eval _dest := $(call word-colon,2,$(cf))) \
-            $(ifeq kernel,$(_dest), \
-                $(eval HAS_PREBUILT_KERNEL := true)))
-    endif
-
-    ifneq ($(HAS_PREBUILT_KERNEL),)
-        $(warning ***************************************************************)
-        $(warning * Using prebuilt kernel binary instead of source              *)
-        $(warning * THIS IS DEPRECATED, AND WILL BE DISCONTINUED                *)
-        $(warning * Please configure your device to download the kernel         *)
-        $(warning * source repository to $(KERNEL_SRC))
-        $(warning * for more information                                        *)
-        $(warning ***************************************************************)
-        FULL_KERNEL_BUILD := false
-        KERNEL_BIN := $(TARGET_PREBUILT_KERNEL)
-    else
-        $(warning ***************************************************************)
-        $(warning *                                                             *)
-        $(warning * No kernel source found, and no fallback prebuilt defined.   *)
-        $(warning * Please make sure your device is properly configured to      *)
-        $(warning * download the kernel repository to $(KERNEL_SRC))
-        $(warning * and add the TARGET_KERNEL_CONFIG variable to BoardConfig.mk *)
-        $(warning *                                                             *)
-        $(warning * As an alternative, define the TARGET_PREBUILT_KERNEL        *)
-        $(warning * variable with the path to the prebuilt binary kernel image  *)
-        $(warning * in your BoardConfig.mk file                                 *)
-        $(warning *                                                             *)
-        $(warning ***************************************************************)
-        $(error "NO KERNEL")
-    endif
-else
-    NEEDS_KERNEL_COPY := true
-    ifeq ($(TARGET_KERNEL_CONFIG),)
-        $(warning **********************************************************)
-        $(warning * Kernel source found, but no configuration was defined  *)
-        $(warning * Please add the TARGET_KERNEL_CONFIG variable to your   *)
-        $(warning * BoardConfig.mk file                                    *)
-        $(warning **********************************************************)
-        # $(error "NO KERNEL CONFIG")
-    else
-        #$(info Kernel source found, building it)
-        FULL_KERNEL_BUILD := true
-        KERNEL_BIN := $(TARGET_PREBUILT_INT_KERNEL)
-    endif
-endif
-
-ifeq ($(FULL_KERNEL_BUILD),true)
-
-ifeq ($(NEED_KERNEL_MODULE_ROOT),true)
-KERNEL_MODULES_OUT := $(TARGET_ROOT_OUT)
-KERNEL_DEPMOD_STAGING_DIR := $(KERNEL_BUILD_OUT_PREFIX)$(call intermediates-dir-for,PACKAGING,depmod_recovery)
-KERNEL_MODULE_MOUNTPOINT :=
-else ifeq ($(NEED_KERNEL_MODULE_SYSTEM),true)
-KERNEL_MODULES_OUT := $(TARGET_OUT)
-KERNEL_DEPMOD_STAGING_DIR := $(KERNEL_BUILD_OUT_PREFIX)$(call intermediates-dir-for,PACKAGING,depmod_system)
-KERNEL_MODULE_MOUNTPOINT := system
-else
-KERNEL_MODULES_OUT := $(TARGET_OUT_VENDOR)
-KERNEL_DEPMOD_STAGING_DIR := $(KERNEL_BUILD_OUT_PREFIX)$(call intermediates-dir-for,PACKAGING,depmod_vendor)
-KERNEL_MODULE_MOUNTPOINT := vendor
-endif
-MODULES_INTERMEDIATES := $(KERNEL_BUILD_OUT_PREFIX)$(call intermediates-dir-for,PACKAGING,kernel_modules)
-
-PATH_OVERRIDE :=
-ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
-    ifneq ($(TARGET_KERNEL_CLANG_VERSION),)
-        ifeq ($(TARGET_KERNEL_CLANG_VERSION),latest)
-            # Set the latest version of clang
-            KERNEL_CLANG_VERSION := $(shell ls -d $(BUILD_TOP)/prebuilts/clang/host/$(HOST_OS)-x86/clang-r* | xargs -n 1 basename | tail -1)
-        else
-            # Find the clang-* directory containing the specified version
-            KERNEL_CLANG_VERSION := clang-$(TARGET_KERNEL_CLANG_VERSION)
-        endif
-    else
-        # Use the default version of clang if TARGET_KERNEL_CLANG_VERSION hasn't been set by the device config
-        KERNEL_CLANG_VERSION := $(LLVM_PREBUILTS_VERSION)
-    endif
-    TARGET_KERNEL_CLANG_PATH ?= $(BUILD_TOP)/prebuilts/clang/host/$(HOST_OS)-x86/$(KERNEL_CLANG_VERSION)
-    ifeq ($(KERNEL_ARCH),arm64)
-        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=aarch64-linux-gnu-
-    else ifeq ($(KERNEL_ARCH),arm)
-        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=arm-linux-gnu-
-    else ifeq ($(KERNEL_ARCH),x86)
-        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=x86_64-linux-gnu-
-    endif
-    PATH_OVERRIDE += PATH=$(TARGET_KERNEL_CLANG_PATH)/bin:$$PATH LD_LIBRARY_PATH=$(TARGET_KERNEL_CLANG_PATH)/lib64:$$LD_LIBRARY_PATH
-    ifeq ($(KERNEL_CC),)
-        KERNEL_CC := CC="$(CCACHE_BIN) clang"
-    endif
-endif
-
-ifneq ($(TARGET_KERNEL_MODULES),)
-    $(error TARGET_KERNEL_MODULES is no longer supported!)
-endif
-
-PATH_OVERRIDE += PATH=$(KERNEL_TOOLCHAIN_PATH_gcc)/bin:$$PATH
-
-# System tools are no longer allowed on 10+
-PATH_OVERRIDE += $(TOOLS_PATH_OVERRIDE)
-
-KERNEL_ADDITIONAL_CONFIG_OUT := $(KERNEL_OUT)/.additional_config
-
-# Internal implementation of make-kernel-target
-# $(1): output path (The value passed to O=)
-# $(2): target to build (eg. defconfig, modules, dtbo.img)
-define internal-make-kernel-target
-$(PATH_OVERRIDE) $(KERNEL_MAKE_CMD) $(KERNEL_MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_BUILD_OUT_PREFIX)$(1) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_CLANG_TRIPLE) $(KERNEL_CC) $(2)
-endef
-
-# Make a kernel target
-# $(1): The kernel target to build (eg. defconfig, modules, modules_install)
-define make-kernel-target
-$(call internal-make-kernel-target,$(KERNEL_OUT),$(1))
-endef
-
-# Make a DTBO target
-# $(1): The DTBO target to build (eg. dtbo.img, defconfig)
-define make-dtbo-target
-$(call internal-make-kernel-target,$(PRODUCT_OUT)/dtbo,$(1))
-endef
-
-# Make a DTB targets
-# $(1): The DTB target to build (eg. dtbs, defconfig)
-define make-dtb-target
-$(call internal-make-kernel-target,$(DTBS_OUT),$(1))
-endef
-
-$(KERNEL_OUT):
-	mkdir -p $(KERNEL_OUT)
-
-$(KERNEL_ADDITIONAL_CONFIG_OUT): $(KERNEL_OUT)
-	$(hide) cmp -s $(KERNEL_ADDITIONAL_CONFIG_SRC) $@ || cp $(KERNEL_ADDITIONAL_CONFIG_SRC) $@;
-
-$(KERNEL_CONFIG): $(KERNEL_DEFCONFIG_SRC) $(KERNEL_ADDITIONAL_CONFIG_OUT)
-	@echo "Building Kernel Config"
-	$(call make-kernel-target,VARIANT_DEFCONFIG=$(VARIANT_DEFCONFIG) SELINUX_DEFCONFIG=$(SELINUX_DEFCONFIG) $(KERNEL_DEFCONFIG))
-	$(hide) if [ ! -z "$(KERNEL_CONFIG_OVERRIDE)" ]; then \
-			echo "Overriding kernel config with '$(KERNEL_CONFIG_OVERRIDE)'"; \
-			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT)/.config; \
-			$(call make-kernel-target,oldconfig); \
-		fi
-	# Create defconfig build artifact
-	$(call make-kernel-target,savedefconfig)
-	$(hide) if [ ! -z "$(KERNEL_ADDITIONAL_CONFIG)" ]; then \
-			echo "Using additional config '$(KERNEL_ADDITIONAL_CONFIG)'"; \
-			$(KERNEL_SRC)/scripts/kconfig/merge_config.sh -m -O $(KERNEL_OUT) $(KERNEL_OUT)/.config $(KERNEL_SRC)/arch/$(KERNEL_ARCH)/configs/$(KERNEL_ADDITIONAL_CONFIG); \
-			$(call make-kernel-target,KCONFIG_ALLCONFIG=$(KERNEL_OUT)/.config alldefconfig); \
-		fi
-
-$(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_CONFIG) $(DEPMOD)
-	@echo "Building Kernel"
-	$(call make-kernel-target,$(BOARD_KERNEL_IMAGE_NAME))
-	$(hide) if grep -q '^CONFIG_OF=y' $(KERNEL_CONFIG); then \
-			echo "Building DTBs"; \
-			$(call make-kernel-target,dtbs); \
-		fi
-	$(hide) if grep -q '=m' $(KERNEL_CONFIG); then \
-			echo "Building Kernel Modules"; \
-			$(call make-kernel-target,modules) || exit "$$?"; \
-			echo "Installing Kernel Modules"; \
-			$(call make-kernel-target,INSTALL_MOD_PATH=$(MODULES_INTERMEDIATES) INSTALL_MOD_STRIP=1 modules_install); \
-			kernel_release=$$(cat $(KERNEL_RELEASE)) \
-			modules=$$(find $(MODULES_INTERMEDIATES)/lib/modules/$$kernel_release -type f -name '*.ko'); \
-			($(call build-image-kernel-modules,$$modules,$(KERNEL_MODULES_OUT),$(KERNEL_MODULE_MOUNTPOINT)/,$(KERNEL_DEPMOD_STAGING_DIR))); \
-		fi
-
-.PHONY: kerneltags
-kerneltags: $(KERNEL_CONFIG)
-	$(call make-kernel-target,tags)
-
-.PHONY: kernelsavedefconfig alldefconfig
-
-kernelsavedefconfig: $(KERNEL_OUT)
-	$(call make-kernel-target,$(KERNEL_DEFCONFIG))
-	env KCONFIG_NOTIMESTAMP=true \
-		 $(call make-kernel-target,savedefconfig)
-	cp $(KERNEL_OUT)/defconfig $(KERNEL_DEFCONFIG_SRC)
-
-alldefconfig: $(KERNEL_OUT)
-	env KCONFIG_NOTIMESTAMP=true \
-		 $(call make-kernel-target,alldefconfig)
-
-ifeq ($(TARGET_NEEDS_DTBOIMAGE),true)
-$(BOARD_PREBUILT_DTBOIMAGE):
-	echo -e ${CL_GRN}"Building DTBO.img"${CL_RST}
-	$(call make-dtbo-target,$(KERNEL_DEFCONFIG))
-	$(call make-dtbo-target,dtbo.img)
-endif # TARGET_NEEDS_DTBOIMAGE
-
-endif # FULL_KERNEL_BUILD
-
-## Install it
-
-ifeq ($(NEEDS_KERNEL_COPY),true)
-file := $(INSTALLED_KERNEL_TARGET)
-ALL_PREBUILT += $(file)
-$(file) : $(KERNEL_BIN) | $(ACP)
-	$(transform-prebuilt-to-target)
-
-ALL_PREBUILT += $(INSTALLED_KERNEL_TARGET)
-endif
-
-INSTALLED_DTBOIMAGE_TARGET := $(PRODUCT_OUT)/dtbo.img
-ALL_PREBUILT += $(INSTALLED_DTBOIMAGE_TARGET)
-
-.PHONY: kernel
-kernel: $(INSTALLED_KERNEL_TARGET)
-
-.PHONY: dtboimage
-dtboimage: $(INSTALLED_DTBOIMAGE_TARGET)
-
-ifeq ($(BOARD_INCLUDE_DTB_IN_BOOTIMG),true)
-ifeq ($(BOARD_PREBUILT_DTBIMAGE_DIR),)
-$(INSTALLED_DTBIMAGE_TARGET):
-	echo -e ${CL_GRN}"Building DTBs"${CL_RST}
-	$(call make-dtb-target,$(KERNEL_DEFCONFIG))
-	$(call make-dtb-target,dtbs)
-	cat $(shell find $(DTBS_OUT)/arch/$(KERNEL_ARCH)/boot/dts/** -type f -name "*.dtb" | sort) > $@
-endif
-.PHONY: dtbimage
-dtbimage: $(INSTALLED_DTBIMAGE_TARGET)
-endif # BOARD_INCLUDE_DTB_IN_BOOTIMG
-
-endif # TARGET_NO_KERNEL
diff --git a/config/BoardConfigCarbon.mk b/config/BoardConfigCarbon.mk
index 38222f6..faf2e32 100644
--- a/config/BoardConfigCarbon.mk
+++ b/config/BoardConfigCarbon.mk
@@ -4,7 +4,7 @@ ifeq (true,false)
     BOARD_HAL_STATIC_LIBRARIES := libhealthd.lineage
 endif
 
-include vendor/carbon/config/BoardConfigKernel.mk
+#~ include vendor/carbon/config/BoardConfigKernel.mk
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
 include vendor/carbon/config/BoardConfigQcom.mk
diff --git a/config/common.mk b/config/common.mk
index dba67c0..04cb0c4 100644
--- a/config/common.mk
+++ b/config/common.mk
@@ -59,8 +59,8 @@ PRODUCT_COPY_FILES += \
     vendor/carbon/sounds/BatteryPlugged_48k.ogg:$(TARGET_COPY_OUT_SYSTEM)/media/audio/ui/BatteryPlugged_48k.ogg
 
 # Enforce privapp-permissions whitelist
-PRODUCT_SYSTEM_DEFAULT_PROPERTIES += \
-    ro.control_privapp_permissions=enforce
+#~ PRODUCT_SYSTEM_DEFAULT_PROPERTIES += \
+#~     ro.control_privapp_permissions=enforce
 
 # Additional packages
 -include vendor/carbon/config/packages.mk
diff --git a/sdclang/sdllvm-lto-defs.mk b/sdclang/sdllvm-lto-defs.mk
deleted file mode 100644
index fb8b18e..0000000
--- a/sdclang/sdllvm-lto-defs.mk
+++ /dev/null
@@ -1,35 +0,0 @@
-ifeq ($(LOCAL_MODULE_CLASS), STATIC_LIBRARIES)
-# For STATIC_LIBRARIES we need to use SD LLVM's archiver and archiver flags.
-
-AR := $(SDCLANG_PATH)/llvm-ar
-ARFLAGS := crsD
-
-# For 32 bit
-$(LOCAL_BUILT_MODULE) : $(combo_2nd_arch_prefix)TARGET_AR := $(AR)
-$(LOCAL_BUILT_MODULE) : $(combo_var_prefix)GLOBAL_ARFLAGS := $(ARFLAGS)
-
-# For 64 bit
-intermediates := $(call local-intermediates-dir,,$(LOCAL_2ND_ARCH_VAR_PREFIX))
-LOCAL_BUILT_MODULE_64 := $(intermediates)/$(my_installed_module_stem)
-
-$(LOCAL_BUILT_MODULE_64) : TARGET_AR := $(AR)
-$(LOCAL_BUILT_MODULE_64) : TARGET_GLOBAL_ARFLAGS := $(ARFLAGS)
-
-else
-# For SHARED_LIBRARIES and EXECUTABLES we need to filter out flags not
-# needed/understood by SD LLVM's Linker.
-
-linked_module_32 := $(intermediates)/LINKED/$(my_installed_module_stem)
-intermediates    := $(call local-intermediates-dir,,$(LOCAL_2ND_ARCH_VAR_PREFIX))
-linked_module_64 := $(intermediates)/LINKED/$(my_installed_module_stem)
-
-FLAGS_TO_BE_FILTERED := -Wl,--icf=safe -Wl,--no-undefined-version -Wl,--fix-cortex-a53-843419 -fuse-ld=gold -Wl,-m,aarch64_elf64_le_vec
-$(linked_module_32) : PRIVATE_TARGET_GLOBAL_LDFLAGS := $(filter-out $(FLAGS_TO_BE_FILTERED),$(PRIVATE_TARGET_GLOBAL_LDFLAGS))
-$(linked_module_64) : PRIVATE_TARGET_GLOBAL_LDFLAGS := $(filter-out $(FLAGS_TO_BE_FILTERED),$(PRIVATE_TARGET_GLOBAL_LDFLAGS))
-
-ifeq ($(LOCAL_SDCLANG_LTO_UNSAFE_FILTER), true)
-$(linked_module_32) : PRIVATE_LDFLAGS := $(filter-out $(FLAGS_TO_BE_FILTERED),$(PRIVATE_LDFLAGS))
-$(linked_module_64) : PRIVATE_LDFLAGS := $(filter-out $(FLAGS_TO_BE_FILTERED),$(PRIVATE_LDFLAGS))
-endif
-
-endif
diff --git a/sdclang/vendorsetup.sh b/sdclang/vendorsetup.sh
deleted file mode 100644
index 09f0045..0000000
--- a/sdclang/vendorsetup.sh
+++ /dev/null
@@ -1,20 +0,0 @@
-# Set SDClang defaults
-export SDCLANG=false
-export SDCLANG_PATH=vendor/qcom/sdclang-6.0/linux-x86/bin
-export SDCLANG_LTO_DEFS=vendor/carbon/sdclang/sdllvm-lto-defs.mk
-export SDCLANG_COMMON_FLAGS="-O3 -fvectorize -Wno-user-defined-warnings -Wno-vectorizer-no-neon -Wno-unknown-warning-option \
--Wno-deprecated-register -Wno-tautological-type-limit-compare -Wno-sign-compare -Wno-gnu-folding-constant \
--mllvm -arm-implicit-it=always -Wno-inline-asm -Wno-unused-command-line-argument -Wno-unused-variable"
-
-# Enable based on host OS/availablitiy
-case $(uname -s) in
-    Linux)
-        if [ -d "$SDCLANG_PATH" ]; then
-            export SDCLANG=true
-        fi
-        ;;
-    Darwin)
-        ;;
-    *)
-        ;;
-esac
-- 
2.17.1

