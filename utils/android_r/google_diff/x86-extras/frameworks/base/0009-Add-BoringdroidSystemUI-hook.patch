From dce378b2d2087ceaaad33723c4ee6fb4a461f0b6 Mon Sep 17 00:00:00 2001
From: utzcoz <utzcoz@outlook.com>
Date: Fri, 24 Jul 2020 15:27:32 +0800
Subject: [PATCH 1/3] Add BoringdroidSystemUI hook

1. Use persist.sys.systemuiplugin.enabled to control plugin and nav bar style
2. Reload BoringdroidSystemUI after display theme and tuner changed
3. Notify task moved to front event when focused task changed

Signed-off-by: utzcoz <utzcoz@outlook.com>
---
 packages/SystemUI/res/values/config.xml       |  3 ++
 packages/SystemUI/res/values/dimens.xml       |  4 ++-
 .../shared/plugins/PluginManagerImpl.java     |  6 +++-
 .../android/systemui/BoringdroidConfig.java   | 24 ++++++++++++++
 .../fragments/FragmentHostManager.java        | 13 ++++++++
 .../phone/NavigationBarInflaterView.java      | 32 ++++++++++++++++++-
 .../com/android/server/wm/ActivityRecord.java |  6 ++++
 7 files changed, 85 insertions(+), 3 deletions(-)
 create mode 100644 packages/SystemUI/src/com/android/systemui/BoringdroidConfig.java

diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index 5e5df6bfd9880..f418caa8d35e5 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -344,6 +344,9 @@
     <string name="config_navBarLayout" translatable="false">left[.5W],back[1WC];home;recent[1WC],right[.5W]</string>
     <string name="config_navBarLayoutQuickstep" translatable="false">back[1.7WC];home;contextual[1.7WC]</string>
     <string name="config_navBarLayoutHandle" translatable="false">back[40AC];home_handle;ime_switcher[40AC]</string>
+    <!-- region @boringdroid -->
+    <string name="boring_config_navBarLayout" translatable="false">back,home,recent;;</string>
+    <!-- endregion -->
 
     <bool name="quick_settings_show_full_alarm">false</bool>
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index f002a271a43b5..d707453508fef 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -340,7 +340,9 @@
     <dimen name="navigation_icon_size">32dp</dimen>
 
     <dimen name="navigation_key_padding">0dp</dimen>
-
+    <!-- region @boringdroid -->
+    <dimen name="boring_navigation_key_width">30dp</dimen>
+    <!-- endregion -->
     <!-- The width of the view containing the menu/ime navigation bar icons -->
     <dimen name="navigation_extra_key_width">36dp</dimen>
 
diff --git a/packages/SystemUI/shared/src/com/android/systemui/shared/plugins/PluginManagerImpl.java b/packages/SystemUI/shared/src/com/android/systemui/shared/plugins/PluginManagerImpl.java
index 4d1fb38329e9d..ce79c3df7733e 100644
--- a/packages/SystemUI/shared/src/com/android/systemui/shared/plugins/PluginManagerImpl.java
+++ b/packages/SystemUI/shared/src/com/android/systemui/shared/plugins/PluginManagerImpl.java
@@ -93,7 +93,11 @@ public class PluginManagerImpl extends BroadcastReceiver implements PluginManage
         mContext = context;
         mFactory = factory;
         mLooper = initializer.getBgLooper();
-        isDebuggable = debuggable;
+        // region @boringdroid
+        // We enable the plugin manager despite of the debuggable flag.
+        // isDebuggable = debuggable;
+        isDebuggable = SystemProperties.getBoolean("persist.sys.systemuiplugin.enabled", false);
+        // endregion
         mWhitelistedPlugins.addAll(Arrays.asList(initializer.getWhitelistedPlugins(mContext)));
         mPluginPrefs = new PluginPrefs(mContext);
         mPluginEnabler = initializer.getPluginEnabler(mContext);
diff --git a/packages/SystemUI/src/com/android/systemui/BoringdroidConfig.java b/packages/SystemUI/src/com/android/systemui/BoringdroidConfig.java
new file mode 100644
index 0000000000000..d4aff777d9385
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/BoringdroidConfig.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2020 The boringdroid Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui;
+
+import android.os.SystemProperties;
+
+public class BoringdroidConfig {
+    public static boolean IS_SYSTEMUI_PLUGIN_ENABLED =
+            SystemProperties.getBoolean("persist.sys.systemuiplugin.enabled", false);
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/fragments/FragmentHostManager.java b/packages/SystemUI/src/com/android/systemui/fragments/FragmentHostManager.java
index 87d90adceba52..708a123cd6990 100644
--- a/packages/SystemUI/src/com/android/systemui/fragments/FragmentHostManager.java
+++ b/packages/SystemUI/src/com/android/systemui/fragments/FragmentHostManager.java
@@ -22,8 +22,10 @@ import android.app.FragmentManager;
 import android.app.FragmentManager.FragmentLifecycleCallbacks;
 import android.app.FragmentManagerNonConfig;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
@@ -34,9 +36,11 @@ import android.view.View;
 
 import androidx.annotation.NonNull;
 
+import com.android.internal.BoringdroidManager;
 import com.android.settingslib.applications.InterestingConfigChanges;
 import com.android.systemui.Dependency;
 import com.android.systemui.plugins.Plugin;
+import com.android.systemui.shared.plugins.PluginManagerImpl;
 import com.android.systemui.util.leak.LeakDetector;
 
 import java.io.FileDescriptor;
@@ -157,6 +161,15 @@ public class FragmentHostManager {
     protected void onConfigurationChanged(Configuration newConfig) {
         if (mConfigChanges.applyNewConfig(mContext.getResources())) {
             reloadFragments();
+            // region @boringdroid
+            if (BoringdroidManager.IS_SYSTEMUI_PLUGIN_ENABLED) {
+                Intent intent = new Intent(
+                        PluginManagerImpl.PLUGIN_CHANGED,
+                        Uri.fromParts("package", "com.boringdroid.systemui", null)
+                );
+                mContext.sendBroadcast(intent);
+            }
+            // endregion
         } else {
             mFragments.dispatchConfigurationChanged(newConfig);
         }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarInflaterView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarInflaterView.java
index 4337e20c0a398..ebcbace4cfb9a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarInflaterView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarInflaterView.java
@@ -19,8 +19,10 @@ import static android.view.WindowManagerPolicyConstants.NAV_BAR_MODE_3BUTTON;
 
 import android.annotation.Nullable;
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.Configuration;
 import android.graphics.drawable.Icon;
+import android.net.Uri;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.SparseArray;
@@ -33,9 +35,11 @@ import android.widget.LinearLayout;
 import android.widget.Space;
 
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.systemui.BoringdroidConfig;
 import com.android.systemui.Dependency;
 import com.android.systemui.R;
 import com.android.systemui.recents.OverviewProxyService;
+import com.android.systemui.shared.plugins.PluginManagerImpl;
 import com.android.systemui.shared.system.QuickStepContract;
 import com.android.systemui.statusbar.phone.ReverseLinearLayout.ReverseRelativeLayout;
 import com.android.systemui.statusbar.policy.KeyButtonView;
@@ -139,7 +143,13 @@ public class NavigationBarInflaterView extends FrameLayout
                 : mOverviewProxyService.shouldShowSwipeUpUI()
                         ? R.string.config_navBarLayoutQuickstep
                         : R.string.config_navBarLayout;
-        return getContext().getString(defaultResource);
+        // region @boringdroid
+        if (BoringdroidConfig.IS_SYSTEMUI_PLUGIN_ENABLED) {
+            return getContext().getString(R.string.boring_config_navBarLayout);
+        } else {
+            return getContext().getString(defaultResource);
+        }
+        // endregion
     }
 
     @Override
@@ -160,6 +170,15 @@ public class NavigationBarInflaterView extends FrameLayout
         if (!Objects.equals(mCurrentLayout, newValue)) {
             clearViews();
             inflateLayout(newValue);
+            // region @boringdroid
+            if (BoringdroidManager.IS_SYSTEMUI_PLUGIN_ENABLED) {
+                Intent intent = new Intent(
+                        PluginManagerImpl.PLUGIN_CHANGED,
+                        Uri.fromParts("package", "com.boringdroid.systemui", null)
+                );
+                getContext().sendBroadcast(intent);
+            }
+            // endregion
         }
     }
 
@@ -399,6 +418,17 @@ public class NavigationBarInflaterView extends FrameLayout
                 }
             }
         }
+        // region @boringdroid
+        if (BoringdroidConfig.IS_SYSTEMUI_PLUGIN_ENABLED && v instanceof KeyButtonView) {
+            ViewGroup.LayoutParams layoutParams = v.getLayoutParams();
+            layoutParams.width =
+                    (int) v.getContext()
+                            .getResources()
+                            .getDimension(R.dimen.boring_navigation_key_width);
+            v.setLayoutParams(layoutParams);
+            v.setPadding(0, v.getPaddingTop(), 0, v.getPaddingBottom());
+        }
+        // endregion
         return v;
     }
 
diff --git a/services/core/java/com/android/server/wm/ActivityRecord.java b/services/core/java/com/android/server/wm/ActivityRecord.java
index dc4caf8de0fda..276d4a395b227 100644
--- a/services/core/java/com/android/server/wm/ActivityRecord.java
+++ b/services/core/java/com/android/server/wm/ActivityRecord.java
@@ -2444,6 +2444,12 @@ final class ActivityRecord extends WindowToken implements WindowManagerService.A
         }
 
         stack.moveToFront(reason, task);
+        // region @boringdroid
+        // We should notify task moved to front event if we change focused task
+        if (task != null) {
+            mAtmService.getTaskChangeNotificationController().notifyTaskMovedToFront(task.getTaskInfo());
+        }
+        // endregion
         // Report top activity change to tracking services and WM
         if (mRootWindowContainer.getTopResumedActivity() == this) {
             mAtmService.setResumedActivityUncheckLocked(this, reason);
-- 
2.17.1

